import Head from "next/head";
import Button from "@mui/material/Button";
import { useEffect, useRef, useState } from "react";
import { ethers } from "ethers";
import tokenSaleArtifact from "../web3/abi/token-sale.json";
import { Web3Button, Web3Modal } from "@web3modal/react";
import { ethereumClient } from "./_app";
import { useAccount, useContract, useProvider, useSigner } from "wagmi";

export default function Home() {
  const amountToBuy: any = useRef(0);

  const { isConnected } = useAccount();

  const provider = useProvider();

  const contract = useContract({
    address: tokenSaleArtifact.address,
    abi: tokenSaleArtifact.abi,
  });

  const { data: signer } = useSigner();

  const [tokenBalance, setTokenBalance] = useState(0);

  const [price, setPrice] = useState(0);

  const [maxAllocation, setMaxAllocation] = useState(0);

  const [isDisplayed, setIsDisplayed] = useState(false);

  useEffect(() => {
    setIsDisplayed(isConnected);

    console.log(provider);
  }, [isConnected]);

  // useEffect(() => {
  //   if (!contract) return;

  //   async function init(contract: any): Promise<void> {
  //     setPrice(await contract?.price());
  //   }

  //   init(contract);
  //   console.log(price);
  // }, [contract]);

  async function buy(event: any) {
    event.preventDefault();

    const WithSigner = contract!.connect(signer!);

    const dai = amountToBuy.current.value;

    const overrides = {
      value: ethers.utils.parseUnits(dai.toString(), 18),
      gasLimit: 110000,
    };

    await WithSigner.buy(overrides);
  }

  return (
    <>
      <Head>
        <title>Token Sale</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="bg-black w-full h-screen flex items-center justify-center">
          <div className="absolute top-6 right-6">
            <Web3Button />
          </div>
          <div className="flex flex-row gap-6">
            <div className="w-[450px] flex flex-col gap-8 relative h-[300px] text-center border-[1px] border-blue-700 rounded-[18px]">
              <h4 className="mt-8 text-xl text-blue-600">
                Your balance in BNB: 0 BNB
              </h4>

              <h4 className="text-xl text-blue-600">1 token = {price} BNB</h4>

              <h4 className="text-xl text-blue-600">
                Max allocation: {maxAllocation} BNB
              </h4>

              <h4 className="text-xl text-blue-600">
                Your balance: {tokenBalance} tokens
              </h4>
            </div>

            <div className="w-[450px] h-[300px] text-center border-[1px] border-blue-700 rounded-[18px]">
              {!isDisplayed ? (
                <h1 className="text-center text-blue-600 text-3xl mt-[30%] justify-center">
                  Please connect your wallet
                </h1>
              ) : (
                <div className="relative h-full">
                  <div className="flex flex-col gap-4 my-16 mx-8 text-center">
                    <form onSubmit={buy} className="flex my-12 flex-col gap-4">
                      <input
                        className="border-[1px] text-center text-blue-600 border-blue-600 h-10 rounded-sm bg-transparent px-5"
                        placeholder="Amount in BNB"
                        type="text"
                        ref={amountToBuy}
                      />
                      <Button
                        className="border-[1px] border-blue-600"
                        variant="contained"
                        type="submit"
                      >
                        Buy
                      </Button>
                    </form>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>

      <Web3Modal
        projectId={process.env.WALLET_CONNECT_ID!}
        ethereumClient={ethereumClient}
      />
    </>
  );
}
